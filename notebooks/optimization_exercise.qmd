---
title: Math before you code
---

```{r lockfile, include=FALSE}
renv::use(
  base64enc   = "base64enc@0.1-3",
  bslib       = "bslib@0.8.0",
  cachem      = "cachem@1.1.0",
  cli         = "cli@3.6.3",
  digest      = "digest@0.6.37",
  evaluate    = "evaluate@1.0.1",
  fastmap     = "fastmap@1.2.0",
  fontawesome = "fontawesome@0.5.3",
  fs          = "fs@1.6.5",
  glue        = "glue@1.8.0",
  highr       = "highr@0.11",
  htmltools   = "htmltools@0.5.8.1",
  jquerylib   = "jquerylib@0.1.4",
  jsonlite    = "jsonlite@1.8.9",
  knitr       = "knitr@1.49",
  lifecycle   = "lifecycle@1.0.4",
  memoise     = "memoise@2.0.1",
  mime        = "mime@0.12",
  R6          = "R6@2.5.1",
  rappdirs    = "rappdirs@0.3.3",
  renv        = "renv@1.0.11",
  rlang       = "rlang@1.1.4",
  rmarkdown   = "rmarkdown@2.29",
  sass        = "sass@0.4.9",
  tinytest    = "tinytest@1.4.1",
  tinytex     = "tinytex@0.54",
  xfun        = "xfun@0.50",
  yaml        = "yaml@2.3.10"
)
```


*Problem*: calculate the sum of all integers smaller or equal to N which are divisible by 3 or 5.

*Example*: if N = 20, then the answer is 3+5+6+9+10+12+15+18+20 = 98

I'm exploring this problem as a potential exercise for students in my Scientific Computing course. 
```{r}
#| include: false
test_cases <- list(
  list(N=3, res=3),
  list(N=-1, res=0),
  list(N=20, res=3+5+6+9+10+12+15+18+20),
  list(N=6, res=3+5+6),
  list(N=4, res=1234512)
)

test <- function(.f, test_cases) {
  lapply(test_cases, \(case) {
     tinytest::expect_equal(.f(case$N), case$res)
  })
}
```

Here is a horrible way to implement this in R:


```{r}
sum_multiples <- function(N) {
  out <- 0
  for (i in 1:N) {
    if (i %% 3 == 0 || i %% 5 == 0) {
      out <- out + i
    }
  }
  return(out)
}

sum_multiples(20)
test(sum_multiples, test_cases)
```
